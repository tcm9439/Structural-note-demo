import{aO as s,af as v,aP as f,aQ as u,aR as h,aS as S,aT as T,aU as g,ah as d,aV as E,l as m,T as w,M as x,aW as C}from"./entry.fb632390.js";class a extends s{convert(t,e){let r=s.getDefaultConverterMap();return r.set(v.STRING,a.fromString),r.set(v.LONG_STRING,a.fromString),s.convert(t,e,r,(o,n)=>`**${o}**: ${n}`)}static fromString(t,e){return f.escapeMarkdown(e.value)}}class i extends u{constructor(){super(new a)}convert(t){let e=u.getDefaultConverterMap();return e.set("Text",i.fromText),super._convert(t,e)}static fromText(t,e){return f.escapeMarkdown(e.content)}}class N{static convert(t){let e=new h;return e.appendLine("## "+t.title),t.elements.ordered_components.forEach(r=>{e.appendLine(new i().convert(r)).appendHorizontalRow()}),e.removeLastRow().toString()}}class y extends S{convert(t){let e=new h;return e.appendLine("# "+t.title).appendEmptyLine(),t.sections.ordered_components.forEach(r=>{e.appendLine(N.convert(r)).appendEmptyLine()}),e.toString()}}class L{static async askForSavePath(t,e){return await T({title:"Save",filters:[{name:"Export File Type",extensions:[t]}],defaultPath:e})}static emitShowConvertPreviewEvent(t){const{$emitter:e}=m();e.emit("EventConstant.EXPORT",t)}static getConverter(t){switch(t){case d.MARKDOWN:return{converter:new y,file_extension:"md"};case d.TEXT:return{converter:new E,file_extension:"txt"};default:throw new g(`export to type ${t}`)}}static async exportToFile(t,e="txt",r=()=>{},o=()=>{}){try{const{$viewState:n,$Message:p}=m(),l=await this.askForSavePath(e,n.editing_note.title);if(l===null){w.logger.warn("No path is chosen to open."),p.info(x("common.cancel")),r();return}await C.TauriFileSystem.instance.writeTextFile(l,t,!1,!0),o(),p.info(x("common.saved"))}catch(n){throw w.logger.error("Fail to export Note.",n),n}}}export{L as N};
